version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  hasura:
    image: hasura/graphql-engine:${HASURA_GRAPHQL_VERSION}
    restart: always
    depends_on:
      - postgres
    environment:
      HASURA_GRAPHQL_DATABASE_URL: ${POSTGRES_CONNECTION_STRING}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_AUTH_HOOK: http://auth:3000/hasura
      HASURA_UNAUTHORIZED_ROLE: ${HASURA_UNAUTHORIZED_ROLE}
    ports:
      - "8080:8080"

  auth:
    image: node:20-alpine
    depends_on:
      - postgres
    restart: always
    ports:
      - "3000:3000"
    tty: true
    volumes:
      - ./auth:/app
      - /app/node_modules
    environment:
      POSTGRES_CONNECTION_STRING: ${POSTGRES_CONNECTION_STRING}
      DOMAIN: ${DOMAIN}
      AUTH_TRUSTED_ORIGINS: ${AUTH_TRUSTED_ORIGINS}
      AUTH_USE_SECURE_COOKIES: ${AUTH_USE_SECURE_COOKIES}
      AUTH_URL: ${AUTH_URL}
      AUTH_SECRET: ${AUTH_SECRET}
      AUTH_METHOD_EMAIL_AND_PASSWORD: ${AUTH_METHOD_EMAIL_AND_PASSWORD}
      AUTH_PLUGIN_ADMIN: ${AUTH_PLUGIN_ADMIN}
      AUTH_PLUGIN_ORGANIZATION: ${AUTH_PLUGIN_ORGANIZATION}
    command: sh -c 'cd /app && npm install && npm start'
    labels:
      - traefik.enable=true
      - traefik.http.routers.${PROJECT_NAME}-auth.rule=Host(`${AUTH_HOST}`)
      - traefik.http.services.${PROJECT_NAME}-auth.loadbalancer.server.port=3000
      # - traefik.http.routers.${PROJECT_NAME}-auth.tls=true
      # - traefik.http.routers.${PROJECT_NAME}-auth.tls.certresolver=letsencrypt

      - traefik.http.middlewares.${PROJECT_NAME}-auth-cors.headers.accesscontrolalloworiginlist=https://${DOMAIN},http://localhost:3000
      - traefik.http.middlewares.${PROJECT_NAME}-auth-cors.headers.accesscontrolallowcredentials=true
      - traefik.http.middlewares.${PROJECT_NAME}-auth-cors.headers.accesscontrolallowheaders=content-type

      - traefik.http.routers.${PROJECT_NAME}-auth.middlewares=${PROJECT_NAME}-auth-cors

  minio:
    image: minio/minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001" # Для MinIO Console/UI
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  # Новый сервис для нашего бэкенда
  storage:
    build:
      context: ./backend # Путь к вашему NestJS проекту
      dockerfile: Dockerfile # Имя файла Dockerfile внутри папки backend
    restart: always
    volumes:
      - ./backend:/app # <-- ДОБАВЛЕНО/ИЗМЕНЕНО
      # - /app/node_modules # <-- ДОБАВЛЕНО: Важно для Node.js проектов!
    # command: npm run start:dev # <-- Может потребоваться изменить команду запуска
    command: npm run start:debug # <-- Это позволит NestJS перезагружаться при изменениях

    depends_on:
      - postgres
      - hasura
      - minio
    environment:
      # Переменные окружения для NestJS бэкенда (мы их добавим в Dockerfile и .env позже)
      NODE_ENV: development
      PORT: 8000
      HASURA_GRAPHQL_ENDPOINT: http://hasura:8080/v1/graphql
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      MINIO_ENDPOINT: minio:9000 # Внутри docker-сети используем имя сервиса

      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME} # constante-storage
      STORAGE_PUBLIC_URL: http://localhost:8000 # Публичный URL для генерации ссылок

      BETTER_AUTH_API_URL: ${BETTER_AUTH_API_URL} # URL BetterAuth API
    ports:
      - "8000:8000" # Пробрасываем порт бэкенда

  # pgadmin:
  #   user: "${UID}:${GID}"
  #   image: dpage/pgadmin4
  #   restart: always
  #   ports:
  #     - "5050:80"
  #   volumes:
  #     # need to chown -R 5050:5050 _volumes/pgadmin
  #     - ./backend/pgadmin/_volumes/pgadmin:/var/lib/pgadmin
  #     - ./backend/pgadmin/servers.json:/pgadmin4/servers.json:ro
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.${PROJECT_NAME}-pgadmin.rule=Host(`${PGADMIN_HOST}`)
  #     - traefik.http.routers.${PROJECT_NAME}-pgadmin.tls=true
  #     - traefik.http.routers.${PROJECT_NAME}-pgadmin.tls.certresolver=letsencrypt

volumes:
  postgres_data:
  minio_data:
